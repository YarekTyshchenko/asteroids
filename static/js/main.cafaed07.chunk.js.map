{"version":3,"sources":["util.ts","components/RefUnwrap.tsx","components/Canvas.tsx","components/CanvasSize.tsx","components/Minimap.tsx","components/MoveTo.tsx","components/PlayerShip.tsx","components/Score.tsx","components/MainView.tsx","providers/SocketContext.tsx","providers/WorldContext.tsx","service/World.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useAnimationFrame","callback","requestRef","React","previousTimeRef","current","requestAnimationFrame","animate","time","undefined","deltaTime","cancelAnimationFrame","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","ev","key","upHandler","window","addEventListener","removeEventListener","RefUnwrap","props","refObject","setCurrent","children","Canvas","canvasRef","ref","canvas","childrenFn","Wrapper","ctx","getContext","height","width","state","setState","delta","multiplier","clientWidth","clientHeight","resizeCanvasToDisplaySize","CanvasSize","bounds","setBounds","Minimap","k","playerShip","className","Math","round","position","x","toLetters","i","floor","abs","y","MoveTo","socket","up","left","right","space","emit","PlayerShip","world","ship","setShip","subscription","subscribe","pship","unsubscribe","Score","score","currentScore","setScore","_","MainView","timeMs","Date","now","ships","shells","hits","centre","playerId","find","s","id","calculateCentreFromPlayer","drawer","canvasDrawer","text","debug","forEach","hit","shell","local","p","font","clearRect","fillStyle","fillRect","drawVerticalLine","moveTo","lineTo","drawHorizontalLine","shipBodyParts","Victor","thrustConeParts","l","localVector","lineWidth","strokeStyle","map","v","clone","rotate","bearing","add","nose","beginPath","closePath","fill","stroke","thrust","tip","shellTip","d","phase","toString","padStart","arc","PI","centreGraduation","colour","fillText","grid","tileSize","ceil","toFixed","connection","io","process","REACT_APP_SOCKET","SocketConsumer","Consumer","Array","Subject","subject","ScoreState","simTimeArray","sendTimeArray","rp","n","String","filter","h","addHit","push","incrementScore","next","decrementScore","t","update","data","timeDelta","unshift","simulationTime","length","pop","simTime","reduce","accu","sendTime","a","frameGap","createWorld","WorldContext","WorldConsumer","App","Boolean","location","hostname","match","ReactDOM","render","Provider","value","on","isStopped","target","owner","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cafaed07.chunk.js","sourcesContent":["import * as React from \"react\";\n\n/**\n * Resize a canvas to match the size its displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] amount to multiply by.\n *    Pass in window.devicePixelRatio for native pixels.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:webgl-utils\n */\nexport function resizeCanvasToDisplaySize(canvas: HTMLCanvasElement, multiplier: number = 1) {\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width ||  canvas.height !== height) {\n    canvas.width  = width;\n    canvas.height = height;\n    //console.log(`W: ${canvas.clientHeight} H: ${canvas.clientWidth}`)\n    return true;\n  }\n  return false;\n}\n\nexport const useAnimationFrame = (callback: (a: number) => void) => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = React.useRef<number>();\n  const previousTimeRef = React.useRef<number>();\n\n  React.useEffect(() => {\n    const animate = (time: number) => {\n      if (previousTimeRef.current !== undefined) {\n        const deltaTime = time - previousTimeRef.current;\n        callback(deltaTime)\n      }\n      previousTimeRef.current = time;\n      requestRef.current = requestAnimationFrame(animate);\n    }\n    requestRef.current = requestAnimationFrame(animate);\n    return () => {\n      requestRef.current && cancelAnimationFrame(requestRef.current)\n    };\n  }, [requestRef, previousTimeRef, callback]); // Make sure the effect runs only once\n}\n\n// Hook\nexport function useKeyPress(targetKey: string) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = React.useState(false);\n\n  // Add event listeners\n  React.useEffect(() => {\n    // If pressed key is our target key then set to true\n    function downHandler(ev: KeyboardEvent) {\n      if (ev.key === targetKey) {\n        setKeyPressed(true);\n      }\n    }\n\n    // If released key is our target key then set to false\n    const upHandler = (ev: KeyboardEvent) => {\n      if (ev.key === targetKey) {\n        setKeyPressed(false);\n      }\n    };\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, [targetKey]);\n\n  return keyPressed;\n}\n","import * as React from \"react\";\n\ninterface RefProps<T> {\n  refObject: React.RefObject<T>\n  children: (t: T) => React.ReactElement\n}\n\n/**\n * Renders children only when ref is set. Re-renders once.\n */\nconst RefUnwrap = <T extends object>(props: RefProps<T>) => {\n  const [current, setCurrent] = React.useState(props.refObject.current)\n  React.useLayoutEffect(() => {\n    if (props.refObject.current) {\n      setCurrent(props.refObject.current)\n    }\n  }, [props.refObject])\n  if (current) {\n    return props.children(current)\n  } else {\n    return null\n  }\n}\n\nexport {RefUnwrap}\n","import * as React from \"react\";\nimport {resizeCanvasToDisplaySize, useAnimationFrame} from \"../util\";\nimport {RefUnwrap} from \"./RefUnwrap\";\n\ntype ChildrenFn = (canvas: CanvasState) => React.ReactElement\n\ninterface Props {\n  children: ChildrenFn\n}\n\nconst Canvas: React.FC<Props> = ({children}) => {\n  const canvasRef = React.createRef<HTMLCanvasElement>();\n  return (\n    <>\n      <canvas ref={canvasRef} />\n      <RefUnwrap refObject={canvasRef}>\n        {current =>\n          <Wrapper canvas={current} childrenFn={children} />\n        }\n      </RefUnwrap>\n    </>\n  )\n}\n\nexport interface CanvasState {\n  ctx: CanvasRenderingContext2D\n  height: number\n  width: number\n}\n\nconst Wrapper: React.FC<{canvas: HTMLCanvasElement, childrenFn: ChildrenFn}> = ({canvas, childrenFn}) => {\n  const ctx = canvas.getContext('2d')!\n  const [state, setState] = React.useState<CanvasState>({\n    ctx, height: canvas.height, width: canvas.width\n  })\n  useAnimationFrame(delta => {\n    resizeCanvasToDisplaySize(canvas)\n    setState({ctx, height: canvas.height, width: canvas.width})\n  })\n\n  return childrenFn(state)\n}\n\nexport {Canvas}\n","import * as React from 'react';\nimport {CanvasState} from \"./Canvas\";\n\ninterface Bounds {\n  width: number\n  height: number\n}\n\nconst CanvasSize: React.FC<{canvas: CanvasState, children: (a: Bounds) => React.ReactElement}> = ({canvas, children}) => {\n  const [bounds, setBounds] = React.useState<Bounds>({width: canvas.width, height: canvas.height})\n  React.useEffect(() => {\n    setBounds({width: canvas.width, height: canvas.height})\n  }, [canvas.width, canvas.height])\n\n  return children(bounds)\n}\n\nexport {CanvasSize}\n","import * as React from \"react\";\nimport {Ship} from \"../service/World\";\n\nconst Minimap: React.FC<{width: number, height: number, playerShip: Ship}> = ({width, height, playerShip}) => {\n  const getColumnName = (k: number) => {\n    const toLetters = (i: number) => {\n      const previousLetters: string = (i >= 26 ? toLetters(Math.floor(i / 26) -1) : '');\n      const lastLetter = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[i % 26];\n      return previousLetters + lastLetter;\n    }\n    return (k < 0 ? '-' : '') + toLetters(Math.abs(k))\n  }\n\n  return (<div className=\"absolute sector\">\n    Sector {getColumnName(Math.round(playerShip.position.x / width))}{Math.round(playerShip.position.y / height)}\n  </div>)\n}\n\nexport {Minimap}\n\n","import * as React from \"react\";\nimport {useKeyPress} from \"../util\";\n\nconst MoveTo: React.FC<{socket: SocketIOClient.Socket}> = ({socket}) => {\n  const up = useKeyPress('ArrowUp')\n  const left = useKeyPress('ArrowLeft')\n  const right = useKeyPress('ArrowRight')\n  const space = useKeyPress(\" \")\n\n  React.useEffect(() => {\n    if (up) {\n      socket.emit(\"command\", \"thrust-start\")\n    } else {\n      socket.emit(\"command\", \"thrust-end\")\n    }\n  }, [socket, up])\n  React.useEffect(() => {\n    if (left) {\n      socket.emit(\"command\", \"turn-left\")\n    } else {\n      socket.emit(\"command\", \"turn-end\")\n    }\n  }, [socket, left])\n  React.useEffect(() => {\n    if (right) {\n      socket.emit(\"command\", \"turn-right\")\n    } else {\n      socket.emit(\"command\", \"turn-end\")\n    }\n  }, [socket, right])\n  React.useEffect(() => {\n    if (space) {\n      socket.emit(\"command\", \"fire\")\n    }\n  }, [socket, space])\n\n  return (<></>)\n};\n\nexport { MoveTo }\n","import * as React from \"react\";\nimport {Mutable} from \"../model/Mutable\";\nimport {Ship, World} from \"../service/World\";\n\ninterface PlayerShipProps {\n  children: (ship: Ship) => React.ReactElement\n  world: Mutable<World>\n}\n\nconst PlayerShip: React.FC<PlayerShipProps> = ({children, world}) => {\n  const [ship, setShip] = React.useState<Ship | undefined>()\n\n  React.useEffect(() => {\n    const subscription = world.playerShip.subscribe(pship => {\n      setShip(pship)\n    })\n    return () => subscription.unsubscribe()\n  })\n  if (ship) {\n    return children(ship)\n  } else {\n    return <p>Waiting for player ship</p>\n  }\n}\n\nexport {PlayerShip}\n","import * as React from \"react\";\nimport {World} from \"../service/World\";\n\nconst Score: React.FC<{world: World}> = ({world}) => {\n  const [score, setScore] = React.useState<number>(world.score.currentScore())\n  React.useEffect(() => {\n    world.score.score.subscribe(_ => {\n      setScore(world.score.currentScore())\n    })\n  })\n  return (\n    <div className=\"absolute score\">\n      Score: {score}\n    </div>\n  )\n}\n\nexport {Score}\n","import * as React from \"react\";\nimport Victor from \"victor\";\nimport {Hit, Shell, Ship, World} from \"../service/World\";\nimport {useAnimationFrame} from \"../util\";\nimport {CanvasState} from \"./Canvas\";\n\nexport interface Point {\n  x: number\n  y: number\n}\n\nconst calculateCentreFromPlayer = (playerId: string, ships: Ship[], width: number, height: number) => {\n  const ship = ships.find(s => s.id === playerId)\n  if (!ship) {\n    return {x: 0, y: 0}\n  } else {\n    return {x: Math.round(ship.position.x / width) * width, y: Math.round(ship.position.y / height) * height}\n  }\n}\n\nconst MainView: React.FC<{canvas: CanvasState, world: World, socket: SocketIOClient.Socket}> = ({canvas, world, socket}) => {\n  useAnimationFrame(delta => {\n    const timeMs = Date.now()\n    const ships = world.ships(timeMs)\n    const shells = world.shells()\n    const hits = world.hits()\n    const centre = calculateCentreFromPlayer(socket.id, ships, canvas.width, canvas.height)\n    const drawer = canvasDrawer(canvas.ctx, centre)\n    drawer.text(world.debug(), 10, 10, \"gray\")\n    // drawer.text(`Delta: ${delta}`, 10, 20, \"gray\")\n    hits.forEach(hit => {\n      drawer.hit(hit)\n    })\n    shells.forEach(s => {\n      drawer.shell(s)\n    })\n    ships.forEach(s => {\n      drawer.ship(s)\n    })\n  })\n  return null\n}\n\nconst canvasDrawer = (ctx: CanvasRenderingContext2D, centre: Point) => {\n  const width = ctx.canvas.clientWidth\n  const height = ctx.canvas.clientHeight\n  const local = (p: Point): Point => {\n    return ({\n      x: p.x - centre.x + width/2,\n      y: p.y - centre.y + height/2\n    })\n  }\n  ctx.font = '8pt Mono'\n  ctx.clearRect(0, 0, width, height);\n  ctx.fillStyle = \"black\"\n  ctx.fillRect(0, 0, width, height);\n\n  const drawVerticalLine = (x: number) => {\n    ctx.moveTo(x+.5, 0)\n    ctx.lineTo(x+.5, height)\n  }\n  const drawHorizontalLine = (y: number) => {\n    ctx.moveTo(0, y+.5)\n    ctx.lineTo(width, y+.5)\n  }\n\n  const shipBodyParts = [\n    new Victor(10, 0),\n    new Victor(-5, -5),\n    new Victor(-5, 5)\n  ]\n  const thrustConeParts = [\n    new Victor(-5, -2),\n    new Victor(-10, 0),\n    new Victor(-5, 2),\n  ]\n\n  return {\n    ship: (s: Ship) => {\n      ctx.fillStyle = \"white\"\n      const l = local(s.position)\n      const localVector = new Victor(l.x, l.y)\n      //ctx.fillText(s.id, l.x, l.y)\n      // ctx.beginPath()\n      // ctx.arc(l.x, l.y, 7, 0, 2 * Math.PI, false)\n      // ctx.stroke()\n\n      // Ship\n      ctx.lineWidth = 1\n      ctx.strokeStyle = \"white\"\n      ctx.fillStyle = \"black\"\n\n      const [nose, left, right] = shipBodyParts.map(v => v.clone().rotate(s.bearing).add(new Victor(l.x, l.y)))\n      ctx.beginPath()\n      // nose\n      ctx.moveTo(nose.x, nose.y)\n      // left\n      ctx.lineTo(left.x, left.y)\n      // right\n      ctx.lineTo(right.x, right.y)\n      ctx.lineTo(nose.x, nose.y)\n      ctx.closePath()\n      ctx.fill()\n      ctx.stroke()\n\n      // thrust cone\n      if (s.thrust > 0) {\n        const [left, tip, right] = thrustConeParts.map(v => v.clone().rotate(s.bearing).add(localVector))\n        ctx.beginPath()\n        ctx.moveTo(left.x, left.y)\n        ctx.lineTo(tip.x, tip.y)\n        ctx.lineTo(right.x, right.y)\n        ctx.stroke()\n      }\n    },\n    shell: (s: Shell) => {\n      ctx.lineWidth = 1\n      ctx.strokeStyle = \"white\"\n      ctx.beginPath()\n      const l = local(s.position)\n      const shellTip = new Victor(5, 0).rotate(s.bearing).add(new Victor(l.x, l.y))\n      ctx.moveTo(l.x, l.y)\n      ctx.lineTo(shellTip.x, shellTip.y)\n      ctx.stroke()\n    },\n    hit: (hit: Hit) => {\n      ctx.lineWidth = 1\n      const d = Math.round((1-hit.phase)*255).toString(16).padStart(2, \"0\")\n      ctx.strokeStyle = `#${d}${d}${d}`\n      const l = local(hit.position)\n      ctx.beginPath()\n      ctx.arc(l.x, l.y, hit.phase*20, 0, 2 * Math.PI, false)\n      ctx.stroke()\n    },\n    centreGraduation: () => {\n      ctx.strokeStyle = \"#333333\"\n      ctx.lineWidth = 1\n      ctx.beginPath()\n      ctx.moveTo(0, Math.floor(height/2)+0.5)\n      ctx.lineTo(width, Math.floor(height/2)+0.5)\n      ctx.moveTo(Math.floor(width/2)+0.5, 0)\n      ctx.lineTo(Math.floor(width/2)+0.5, height)\n      ctx.stroke()\n    },\n    text: (text: string, x: number, y: number, colour: string = \"white\") => {\n      ctx.fillStyle = colour\n      ctx.fillText(text, x, y)\n    },\n    grid: (tileSize: number = 100) => {\n      ctx.strokeStyle = \"#555555\"\n      ctx.lineWidth = 1\n      ctx.beginPath()\n      for (let i = 0; i < width + tileSize; i+= tileSize) {\n        let x = Math.floor(i + (width/2 - centre.x) % tileSize)\n        drawVerticalLine(x)\n      }\n      for (let i = 0; i < height + tileSize; i+= tileSize) {\n        let y = Math.floor(i + (height/2 - centre.y) % tileSize)\n        drawHorizontalLine(y)\n      }\n      ctx.stroke()\n\n      ctx.fillStyle = \"white\"\n      for (let i = 0; i < width + tileSize; i+= 100) {\n        let x = i + (width/2 - centre.x) % tileSize\n        ctx.fillText((\n          Math.ceil((centre.x - width/2 + i) /tileSize)*tileSize\n        ).toFixed(0).toString(), x, 100)\n      }\n      for (let i = 0; i < height + tileSize; i+= 100) {\n        let y = i + (height/2 - centre.y) % tileSize\n        ctx.fillText((\n          Math.ceil((centre.y - height/2 + i) /tileSize)*tileSize\n        ).toFixed(0).toString(), 5, y)\n      }\n    }\n  }\n}\n\nexport { MainView, useAnimationFrame, canvasDrawer }\n","import * as React from 'react';\nimport * as io from \"socket.io-client\"\n\nconst connection = io.connect(process.env.REACT_APP_SOCKET || \"https://asteroids.yarekt.co.uk\")\nconst SocketContext = React.createContext<SocketIOClient.Socket>(connection)\nconst SocketConsumer = SocketContext.Consumer\n\nexport { SocketConsumer }\n","import * as React from 'react';\nimport {createWorld, Shell, Ship, Vector, World} from \"../service/World\";\nimport {SocketConsumer} from \"./SocketContext\";\n\nconst world = createWorld()\nconst WorldContext = React.createContext<World>(world)\n\nexport interface UpdateData {\n  ships: Ship[],\n  shells: Shell[],\n  simulationTime: number,\n  sendTime: number,\n  frameGap: number,\n  time: number,\n}\n\nexport interface HitShip {\n  owner: string\n  position: Vector\n  target: string\n}\n\nconst WorldProvider: React.FC = ({children}) => {\n  return (\n    <WorldContext.Provider value={world}>\n      <SocketConsumer>\n        { socket => {\n          socket.on(\"update\", (data: UpdateData) => {\n            world.update(data)\n            if (!world.playerShip.isStopped) {\n              const playerShip = data.ships.find(s => s.id === socket.id)\n              if (playerShip) {\n                world.playerShip.next(playerShip)\n                //world.playerShip.complete()\n              }\n            }\n          })\n          socket.on(\"shellHitShip\", (data: HitShip) => {\n            world.addHit(data)\n            if (data.target === socket.id) {\n              world.decrementScore()\n            } else if (data.owner === socket.id) {\n              world.incrementScore()\n            }\n          })\n          return (<>{children}</>)\n        }}\n      </SocketConsumer>\n    </WorldContext.Provider>\n  )\n}\n\nconst WorldConsumer = WorldContext.Consumer\n\nexport { WorldProvider, WorldConsumer }\n","import {HitShip, UpdateData} from \"../providers/WorldContext\";\nimport {Subject} from \"rxjs\";\n\nexport interface Vector {\n  x: number,\n  y: number,\n}\n\nexport interface Ship {\n  id: string,\n  bearing: number,\n  position: Vector,\n  velocity: Vector,\n  thrust: number,\n  turn: number,\n}\n\nexport interface Shell {\n  owner: string,\n  bearing: number,\n  position: Vector,\n  ttl: number,\n}\n\nexport interface Hit {\n  position: Vector\n  phase: number\n}\n\nexport interface World {\n  playerShip: Subject<Ship>\n  ships: (timeMs: number) => Ship[]\n  shells: () => Shell[]\n  hits: () => Hit[]\n  update: (data: UpdateData) => void\n  addHit: (hit: HitShip) => void\n  incrementScore: () => void\n  decrementScore: () => void\n  score: {\n    currentScore: () => number\n    score: Subject<number>\n  }\n  debug: () => string\n}\n\nconst ScoreState = () => {\n  let score = 0\n  const subject = new Subject<number>()\n  subject.subscribe(s => {\n    score += s\n  })\n  return {\n    currentScore: () => score,\n    score: subject,\n  }\n}\n\n/**\n * Client side simulation of the entire game world.\n * Must include state machine for movement based on game time.\n */\nconst createWorld: () => World = () => {\n  // Server side data\n  let ships = new Array<Ship>()\n  let shells = new Array<Shell>()\n  // Client side data\n  let hits = new Array<Hit>()\n\n  const playerShip = new Subject<Ship>()\n  const score = ScoreState()\n\n  // Debug\n  let simTimeArray = new Array<number>()\n  let sendTimeArray = new Array<number>()\n  let debug = \"Debug\"\n\n  const rp = (n: number) => String(Math.round(n)).padStart(3)\n\n  return {\n    playerShip: playerShip,\n    debug: () => debug,\n    hits: () => {\n      // TODO: Make this work via time delta\n      hits.forEach(hit => hit.phase += 1/60)\n      hits = hits.filter(h => h.phase < 1)\n      return hits\n    },\n    addHit: (hit: HitShip) => {\n      hits.push({position: hit.position, phase: 0})\n    },\n    incrementScore: () => {\n      score.score.next(+1)\n    },\n    decrementScore: () => {\n      score.score.next(-1)\n    },\n    score: score,\n    ships: (t) => ships,\n    shells: () => shells,\n    update: (data: UpdateData) => {\n      ships = data.ships\n      shells = data.shells\n\n      const timeDelta = Date.now() - data.time\n\n      simTimeArray.unshift(data.simulationTime)\n      if (simTimeArray.length > 60) {\n        simTimeArray.pop()\n      }\n      const simTime = simTimeArray.reduce((accu, i) => accu + i, 0)/60\n\n      sendTimeArray.unshift(data.sendTime)\n      if (sendTimeArray.length > 60) sendTimeArray.pop()\n      const sendTime = sendTimeArray.reduce((a, i) => a + i, 0)/60\n      debug = `Delay: ${rp(timeDelta)}ms Simulation time: ${rp(data.simulationTime)}ms (${rp(simTime)}ms) ${rp(simTime/16.6*100)}%, sendTime: ${rp(data.sendTime)}ms (${rp(sendTime)}ms) ${rp(sendTime/16.6*100)}%, Inter-frame delay: ${rp(data.frameGap)}ms`\n    },\n  }\n}\n\nexport { createWorld }\n","import * as React from 'react';\nimport './App.css';\nimport {Canvas} from \"./components/Canvas\";\nimport {CanvasSize} from \"./components/CanvasSize\";\nimport {Minimap} from \"./components/Minimap\";\nimport {MoveTo} from \"./components/MoveTo\";\nimport {PlayerShip} from \"./components/PlayerShip\";\nimport {Score} from \"./components/Score\";\nimport {MainView} from \"./components/MainView\";\nimport {SocketConsumer} from \"./providers/SocketContext\";\nimport {WorldConsumer} from \"./providers/WorldContext\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <WorldConsumer>\n          { world =>\n            <SocketConsumer>\n              {socket =>\n                <>\n                  <Canvas>\n                    {canvas =>\n                      <>\n                        <MainView canvas={canvas} socket={socket} world={world} />\n                        <CanvasSize canvas={canvas}>\n                          {({width, height}) =>\n                            <PlayerShip world={world}>\n                              { playerShip =>\n                                <Minimap width={width} height={height} playerShip={playerShip} />\n                              }\n                            </PlayerShip>\n                          }\n                        </CanvasSize>\n                      </>\n                    }\n                  </Canvas>\n                  <MoveTo socket={socket}/>\n                  <Score world={world} />\n                </>\n              }\n            </SocketConsumer>\n          }\n        </WorldConsumer>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {WorldProvider} from \"./providers/WorldContext\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <WorldProvider>\n    <App />\n  </WorldProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}