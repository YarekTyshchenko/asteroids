{"version":3,"sources":["util.ts","components/MoveTo.tsx","components/SensorsAndNavigation.tsx","providers/SocketContext.tsx","providers/WorldContext.tsx","service/World.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useKeyPress","targetKey","React","keyPressed","setKeyPressed","downHandler","ev","key","upHandler","window","addEventListener","removeEventListener","MoveTo","socket","up","left","right","space","emit","SensorsAndNavigation","world","zoom","score","setScore","canvasRef","callback","requestRef","previousTimeRef","current","requestAnimationFrame","animate","time","undefined","deltaTime","cancelAnimationFrame","useAnimationFrame","delta","timeMs","Date","now","ships","shells","hits","canvas","multiplier","width","clientWidth","height","clientHeight","console","log","resizeCanvasToDisplaySize","ctx","getContext","drawer","canvasDrawer","x","y","text","debug","forEach","hit","s","shell","ship","ref","className","centre","local","p","font","clearRect","fillStyle","fillRect","drawVerticalLine","moveTo","lineTo","drawHorizontalLine","shipBodyParts","Victor","thrustConeParts","l","position","localVector","lineWidth","strokeStyle","map","v","clone","rotate","bearing","add","nose","beginPath","closePath","fill","stroke","thrust","tip","shellTip","d","Math","round","phase","toString","padStart","arc","PI","centreGraduation","floor","colour","fillText","grid","tileSize","i","ceil","toFixed","connection","io","process","REACT_APP_SOCKET","SocketConsumer","Consumer","Array","simTimeArray","sendTimeArray","rp","n","String","filter","h","addHit","push","incrementScore","decrementScore","t","update","data","timeDelta","unshift","simulationTime","length","pop","simTime","reduce","accu","sendTime","a","simulationFrameGap","sendTimeFrameGap","createWorld","WorldContext","WorldConsumer","App","Boolean","location","hostname","match","ReactDOM","render","children","Provider","value","on","target","id","owner","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43a8efb2.chunk.js","sourcesContent":["import * as React from \"react\";\n\n/**\n * Resize a canvas to match the size its displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] amount to multiply by.\n *    Pass in window.devicePixelRatio for native pixels.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:webgl-utils\n */\nexport function resizeCanvasToDisplaySize(canvas: HTMLCanvasElement, multiplier: number = 1) {\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width ||  canvas.height !== height) {\n    canvas.width  = width;\n    canvas.height = height;\n    console.log(`W: ${canvas.clientHeight} H: ${canvas.clientWidth}`)\n    return true;\n  }\n  return false;\n}\n\nexport const useAnimationFrame = (callback: (a: number) => void) => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = React.useRef<number>();\n  const previousTimeRef = React.useRef<number>();\n\n  React.useEffect(() => {\n    const animate = (time: number) => {\n      if (previousTimeRef.current !== undefined) {\n        const deltaTime = time - previousTimeRef.current;\n        callback(deltaTime)\n      }\n      previousTimeRef.current = time;\n      requestRef.current = requestAnimationFrame(animate);\n    }\n    requestRef.current = requestAnimationFrame(animate);\n    return () => {\n      requestRef.current && cancelAnimationFrame(requestRef.current)\n    };\n  }, [requestRef, previousTimeRef, callback]); // Make sure the effect runs only once\n}\n\n// Hook\nexport function useKeyPress(targetKey: string) {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = React.useState(false);\n\n  // Add event listeners\n  React.useEffect(() => {\n    // If pressed key is our target key then set to true\n    function downHandler(ev: KeyboardEvent) {\n      if (ev.key === targetKey) {\n        setKeyPressed(true);\n      }\n    }\n\n    // If released key is our target key then set to false\n    const upHandler = (ev: KeyboardEvent) => {\n      if (ev.key === targetKey) {\n        setKeyPressed(false);\n      }\n    };\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, [targetKey]);\n\n  return keyPressed;\n}\n","import * as React from \"react\";\nimport {useKeyPress} from \"../util\";\n\nconst MoveTo: React.FC<{socket: SocketIOClient.Socket}> = ({socket}) => {\n  const up = useKeyPress('ArrowUp')\n  const left = useKeyPress('ArrowLeft')\n  const right = useKeyPress('ArrowRight')\n  const space = useKeyPress(\" \")\n\n  React.useEffect(() => {\n    if (up) {\n      socket.emit(\"command\", \"thrust-start\")\n    } else {\n      socket.emit(\"command\", \"thrust-end\")\n    }\n  }, [socket, up])\n  React.useEffect(() => {\n    if (left) {\n      socket.emit(\"command\", \"turn-left\")\n    } else {\n      socket.emit(\"command\", \"turn-end\")\n    }\n  }, [socket, left])\n  React.useEffect(() => {\n    if (right) {\n      socket.emit(\"command\", \"turn-right\")\n    } else {\n      socket.emit(\"command\", \"turn-end\")\n    }\n  }, [socket, right])\n  React.useEffect(() => {\n    if (space) {\n      socket.emit(\"command\", \"fire\")\n    }\n  }, [socket, space])\n\n  return (<></>)\n};\n\nexport { MoveTo }\n","import * as React from \"react\";\nimport Victor from \"victor\";\nimport {Hit, Shell, Ship, World} from \"../service/World\";\nimport {resizeCanvasToDisplaySize, useAnimationFrame} from \"../util\";\n\nexport interface Point {\n  x: number\n  y: number\n}\n\nconst SensorsAndNavigation: React.FC<{world: World, zoom: number}> = ({world, zoom}) => {\n  const [score, setScore] = React.useState<number>(world.score())\n  const canvasRef = React.createRef<HTMLCanvasElement>();\n  useAnimationFrame(delta => {\n    const timeMs = Date.now()\n    const ships = world.ships(timeMs)\n    const shells = world.shells()\n    const hits = world.hits()\n    setScore(world.score())\n    const canvas = canvasRef.current\n    if (canvas) {\n      resizeCanvasToDisplaySize(canvas)\n      const ctx = canvas.getContext('2d')!\n      const drawer = canvasDrawer(ctx, {x: 0, y: 0}, zoom)\n      drawer.text(world.debug(), 10, 10, \"gray\")\n      // drawer.text(`Delta: ${delta}`, 10, 20, \"gray\")\n      hits.forEach(hit => {\n        drawer.hit(hit)\n      })\n      shells.forEach(s => {\n        drawer.shell(s)\n      })\n      ships.forEach(s => {\n        drawer.ship(s)\n      })\n    }\n  })\n\n  return (\n    <>\n      <canvas ref={canvasRef} />\n      <div className=\"absolute score\">\n        Score: {score}\n      </div>\n    </>\n  )\n}\n\nconst canvasDrawer = (ctx: CanvasRenderingContext2D, centre: Point, zoom: number) => {\n  const width = ctx.canvas.clientWidth\n  const height = ctx.canvas.clientHeight\n  const local = (p: Point): Point => {\n    return ({\n      x: p.x / zoom - centre.x / zoom + width/2,\n      y: p.y / zoom - centre.y / zoom + height/2\n    })\n  }\n  ctx.font = '8pt Mono'\n  ctx.clearRect(0, 0, width, height);\n  ctx.fillStyle = \"black\"\n  ctx.fillRect(0, 0, width, height);\n\n  const drawVerticalLine = (x: number) => {\n    ctx.moveTo(x+.5, 0)\n    ctx.lineTo(x+.5, height)\n  }\n  const drawHorizontalLine = (y: number) => {\n    ctx.moveTo(0, y+.5)\n    ctx.lineTo(width, y+.5)\n  }\n\n  const shipBodyParts = [\n    new Victor(10, 0),\n    new Victor(-5, -5),\n    new Victor(-5, 5)\n  ]\n  const thrustConeParts = [\n    new Victor(-5, -2),\n    new Victor(-10, 0),\n    new Victor(-5, 2),\n  ]\n\n  return {\n    ship: (s: Ship) => {\n      ctx.fillStyle = \"white\"\n      const l = local(s.position)\n      const localVector = new Victor(l.x, l.y)\n      //ctx.fillText(s.id, l.x, l.y)\n      // ctx.beginPath()\n      // ctx.arc(l.x, l.y, 7, 0, 2 * Math.PI, false)\n      // ctx.stroke()\n\n      // Ship\n      ctx.lineWidth = 1\n      ctx.strokeStyle = \"white\"\n      ctx.fillStyle = \"black\"\n\n      const [nose, left, right] = shipBodyParts.map(v => v.clone().rotate(s.bearing).add(new Victor(l.x, l.y)))\n      ctx.beginPath()\n      // nose\n      ctx.moveTo(nose.x, nose.y)\n      // left\n      ctx.lineTo(left.x, left.y)\n      // right\n      ctx.lineTo(right.x, right.y)\n      ctx.lineTo(nose.x, nose.y)\n      ctx.closePath()\n      ctx.fill()\n      ctx.stroke()\n\n      // thrust cone\n      if (s.thrust > 0) {\n        const [left, tip, right] = thrustConeParts.map(v => v.clone().rotate(s.bearing).add(localVector))\n        ctx.beginPath()\n        ctx.moveTo(left.x, left.y)\n        ctx.lineTo(tip.x, tip.y)\n        ctx.lineTo(right.x, right.y)\n        ctx.stroke()\n      }\n    },\n    shell: (s: Shell) => {\n      ctx.lineWidth = 1\n      ctx.strokeStyle = \"white\"\n      ctx.beginPath()\n      const l = local(s.position)\n      const shellTip = new Victor(5, 0).rotate(s.bearing).add(new Victor(l.x, l.y))\n      ctx.moveTo(l.x, l.y)\n      ctx.lineTo(shellTip.x, shellTip.y)\n      ctx.stroke()\n    },\n    hit: (hit: Hit) => {\n      ctx.lineWidth = 1\n      const d = Math.round((1-hit.phase)*255).toString(16).padStart(2, \"0\")\n      console.log(d)\n      ctx.strokeStyle = `#${d}${d}${d}`\n      const l = local(hit.position)\n      ctx.beginPath()\n      ctx.arc(l.x, l.y, hit.phase*20, 0, 2 * Math.PI, false)\n      ctx.stroke()\n    },\n    centreGraduation: () => {\n      ctx.strokeStyle = \"#333333\"\n      ctx.lineWidth = 1\n      ctx.beginPath()\n      ctx.moveTo(0, Math.floor(height/2)+0.5)\n      ctx.lineTo(width, Math.floor(height/2)+0.5)\n      ctx.moveTo(Math.floor(width/2)+0.5, 0)\n      ctx.lineTo(Math.floor(width/2)+0.5, height)\n      ctx.stroke()\n    },\n    text: (text: string, x: number, y: number, colour: string = \"white\") => {\n      ctx.fillStyle = colour\n      ctx.fillText(text, x, y)\n    },\n    grid: (tileSize: number = 100) => {\n      ctx.strokeStyle = \"#555555\"\n      ctx.lineWidth = 1\n      ctx.beginPath()\n      for (let i = 0; i < width + tileSize; i+= tileSize) {\n        let x = Math.floor(i + (width/2 - centre.x) % tileSize)\n        drawVerticalLine(x)\n      }\n      for (let i = 0; i < height + tileSize; i+= tileSize) {\n        let y = Math.floor(i + (height/2 - centre.y) % tileSize)\n        drawHorizontalLine(y)\n      }\n      ctx.stroke()\n\n      ctx.fillStyle = \"white\"\n      for (let i = 0; i < width + tileSize; i+= 100) {\n        let x = i + (width/2 - centre.x) % tileSize\n        ctx.fillText((\n          Math.ceil((centre.x - width/2 + i) /tileSize)*tileSize\n        ).toFixed(0).toString(), x, 100)\n      }\n      for (let i = 0; i < height + tileSize; i+= 100) {\n        let y = i + (height/2 - centre.y) % tileSize\n        ctx.fillText((\n          Math.ceil((centre.y - height/2 + i) /tileSize)*tileSize\n        ).toFixed(0).toString(), 5, y)\n      }\n    }\n  }\n}\n\nexport { SensorsAndNavigation, useAnimationFrame, canvasDrawer }\n","import * as React from 'react';\nimport * as io from \"socket.io-client\"\n\nconst connection = io.connect(process.env.REACT_APP_SOCKET || \"https://asteroids.yarekt.co.uk\")\nconst SocketContext = React.createContext<SocketIOClient.Socket>(connection)\nconst SocketConsumer = SocketContext.Consumer\n\nexport { SocketConsumer }\n","import * as React from 'react';\nimport {createWorld, Shell, Ship, Vector, World} from \"../service/World\";\nimport {SocketConsumer} from \"./SocketContext\";\n\nconst world = createWorld()\nconst WorldContext = React.createContext<World>(world)\n\nexport interface UpdateData {\n  ships: Ship[],\n  shells: Shell[],\n  simulationTime: number,\n  simulationFrameGap: number,\n  sendTime: number,\n  sendTimeFrameGap: number,\n  time: number,\n}\n\nexport interface HitShip {\n  owner: string\n  position: Vector\n  target: string\n}\n\nconst WorldProvider: React.FC = ({children}) => {\n  return (\n    <WorldContext.Provider value={world}>\n      <SocketConsumer>\n        { socket => {\n          socket.on(\"update\", (data: UpdateData) => {\n            world.update(data)\n          })\n          socket.on(\"shellHitShip\", (data: HitShip) => {\n            world.addHit(data)\n            if (data.target == socket.id) {\n              world.decrementScore()\n            } else if (data.owner == socket.id) {\n              world.incrementScore()\n            }\n          })\n          return (<>{children}</>)\n        }}\n      </SocketConsumer>\n    </WorldContext.Provider>\n  )\n}\n\nconst WorldConsumer = WorldContext.Consumer\n\nexport { WorldProvider, WorldConsumer }\n","import {HitShip, UpdateData} from \"../providers/WorldContext\";\n\nexport interface Vector {\n  x: number,\n  y: number,\n}\n\nexport interface Ship {\n  id: string,\n  bearing: number,\n  position: Vector,\n  velocity: Vector,\n  thrust: number,\n  turn: number,\n}\n\nexport interface Shell {\n  owner: string,\n  bearing: number,\n  position: Vector,\n  ttl: number,\n}\n\nexport interface Hit {\n  position: Vector\n  phase: number\n}\n\nexport interface World {\n  ships: (timeMs: number) => Ship[]\n  shells: () => Shell[]\n  hits: () => Hit[]\n  update: (data: UpdateData) => void\n  addHit: (hit: HitShip) => void\n  incrementScore: () => void\n  decrementScore: () => void\n  score: () => number\n  debug: () => string\n}\n\n/**\n * Client side simulation of the entire game world.\n * Must include state machine for movement based on game time.\n */\nconst createWorld: () => World = () => {\n  // Server side data\n  let ships = new Array<Ship>()\n  let shells = new Array<Shell>()\n  // Client side data\n  let hits = new Array<Hit>()\n  let score = 0\n\n  // Debug\n  let simTimeArray = new Array<number>()\n  let sendTimeArray = new Array<number>()\n  let debug = \"Debug\"\n\n  const rp = (n: number) => String(Math.round(n)).padStart(3)\n\n  return {\n    debug: () => debug,\n    hits: () => {\n      hits.forEach(hit => hit.phase += 1/60)\n      hits = hits.filter(h => h.phase < 1)\n      return hits\n    },\n    addHit: (hit: HitShip) => {\n      hits.push({position: hit.position, phase: 0})\n    },\n    incrementScore: () => score++,\n    decrementScore: () => score--,\n    score: () => score,\n    ships: (t) => ships,\n    shells: () => shells,\n    update: (data: UpdateData) => {\n      ships = data.ships\n      shells = data.shells\n\n      const timeDelta = Date.now() - data.time\n\n      simTimeArray.unshift(data.simulationTime)\n      if (simTimeArray.length > 60) {\n        simTimeArray.pop()\n      }\n      const simTime = simTimeArray.reduce((accu, i) => accu + i, 0)/60\n\n      sendTimeArray.unshift(data.sendTime)\n      if (sendTimeArray.length > 60) sendTimeArray.pop()\n      const sendTime = sendTimeArray.reduce((a, i) => a + i, 0)/60\n      debug = `Delay: ${rp(timeDelta)}ms Simulation time: ${rp(data.simulationTime)}ms (${rp(simTime)}ms) ${rp(simTime/16.6*100)}%, Inter-frame delay ${rp(data.simulationFrameGap)}ms, sendTime: ${rp(data.sendTime)}ms (${rp(sendTime)}ms) ${rp(sendTime/16.6*100)}%, Inter-frame delay: ${rp(data.sendTimeFrameGap)}ms`\n    },\n  }\n}\n\nexport { createWorld }\n","import * as React from 'react';\nimport './App.css';\nimport {MoveTo} from \"./components/MoveTo\";\nimport {SensorsAndNavigation} from \"./components/SensorsAndNavigation\";\nimport {SocketConsumer} from \"./providers/SocketContext\";\nimport {WorldConsumer} from \"./providers/WorldContext\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <WorldConsumer>\n          { world =>\n            <>\n              <SensorsAndNavigation world={world} zoom={1}/>\n              <SocketConsumer>\n                {socket => <MoveTo socket={socket}/>}\n              </SocketConsumer>\n\n            </>\n          }\n        </WorldConsumer>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {WorldProvider} from \"./providers/WorldContext\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <WorldProvider>\n    <App />\n  </WorldProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}